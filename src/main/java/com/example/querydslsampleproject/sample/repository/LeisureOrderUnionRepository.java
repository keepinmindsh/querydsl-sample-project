package com.example.querydslsampleproject.sample.repository;

import com.example.querydslsampleproject.sample.domain.LeisureOrderOptionSimple;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.LocalDateTime;
import java.util.List;

public interface LeisureOrderUnionRepository extends JpaRepository<LeisureOrderOptionSimple, Long> {

    // 예약 상태 (전체) + 예약일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDate(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNo(@Param("dateFrom") LocalDateTime dateFrom, @Param("dateTo") LocalDateTime dateTo, @Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 예약일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNoAndChannel(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNoAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 예약일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNoAndChannelAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNoAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndBpReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.created_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.created_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndYanReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 예약일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.created_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.created_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByReservationDateAndReservationNoAndChannelAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDate(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNo(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 사용일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNoAndChannel(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price  from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNoAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 사용일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNoAndChannelAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNoAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndBpReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.consumed_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.consumed_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndYanReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 사용일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.consumed_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.consumed_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByConsumedDateAndReservationNoAndChannelAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDate(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNo(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNo(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNoAndChannel(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (전체) + 취소일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status NOT IN ('RESERVATION_REQUESTED','RESERVATION_FAILED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNoAndChannel(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNoAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNoAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status = 'NOT_USED' AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status = 'NOT_USED' AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNoAndChannelAndReserved(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (예약) + 취소일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status = 'NOT_USED' AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status = 'NOT_USED' AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNoAndChannelAndReserved(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 전체 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 전체 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 전체 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNoAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 전체 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNoAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 특정 채널 + 검색조건 없음
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.channel = ?3 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.channel = ?3 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String channel, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 특정 채널 + 검색조건 (채널 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.bp_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.bp_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndBpReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 특정 채널 + 검색조건 (야놀자 예약 번호)
    @Query(nativeQuery = true,
            value = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d",
            countQuery = "select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.order_id IS NOT NULL AND le.yan_order_id = ?3 AND le.channel = ?4 AND leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.canceled_date between ?1 and ?2 union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.order_id IS NOT NULL AND lh.yan_order_id = ?3 AND lh.channel = ?4 AND lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.canceled_date between ?1 and ?2) d")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndYanReservationNoAndChannelAndCanceled(LocalDateTime dateFrom, LocalDateTime dateTo, String keyword, String channel, Pageable pageable);

    // 예약 상태 (취소) + 취소일 + 특정 채널 + 검색조건 (그 외)
    @Query(nativeQuery = true,
            value = "select * from (select * from (" +
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e",
            countQuery = "select * from (select * from ("+
                    "select leo.id, le.bp_order_id, le.yan_order_id, leo.channel, leo.created_date, leo.consumed_date" +
                    ", leo.canceled_date, le.deal_name, leo.option_name, leo.sale_price, leo.channel_discount_amount, leo.status, leo.yan_ordered_option_id, le.account_amount, le.credit_card_amount, le.welfare_point_amount, le.customer_id, le.total_sale_price from le_order_option leo left join le_order le on le.id = leo.order_id where leo.status IN ('CANCELED', 'FORCED_CANCELED') AND leo.order_id IS NOT NULL AND le.channel = :channel AND leo.canceled_date between :dateFrom and :dateTo union " +
                    "select lho.id, lh.bp_order_id, lh.yan_order_id, lho.channel, lho.created_date, lho.consumed_date" +
                    ", lho.canceled_date, lh.deal_name, lho.option_name, lho.sale_price, lho.channel_discount_amount, lho.status, lho.yan_ordered_option_id, lh.account_amount, lh.credit_card_amount, lh.welfare_point_amount, lh.customer_id, lh.total_sale_price from le_order_option_history lho left join le_order_history lh on lh.id = lho.order_id where lho.status IN ('CANCELED', 'FORCED_CANCELED') AND lho.order_id IS NOT NULL AND lh.channel = :channel AND lho.canceled_date between :dateFrom and :dateTo ) d where d.customer_id IN :customerIdLists or (d.customer_id IS NULL and d.bp_order_id IN :customerOrderIdList )) e")
    PageImpl<LeisureOrderOptionSimple> findByCanceledDateAndReservationNoAndChannelAndCanceled(@Param("dateFrom") LocalDateTime dateFrom,@Param("dateTo") LocalDateTime dateTo,@Param("channel") String channel,@Param("customerIdLists") List<Long> customerIdLists, @Param("customerOrderIdList") List<Long> customerOrderIdList, Pageable pageable);
}
